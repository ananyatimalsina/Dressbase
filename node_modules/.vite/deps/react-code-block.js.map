{
  "version": 3,
  "sources": ["../../react-code-block/dist/code-block.js", "../../react-code-block/dist/contexts.js", "../../react-code-block/dist/utils.js"],
  "sourcesContent": ["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Highlight } from 'prism-react-renderer';\nimport React, { forwardRef, useMemo } from 'react';\nimport { LineContext, RootContext, useLineContext, useRootContext, } from './contexts';\nimport { parseWordHighlights, shouldHighlightLine, shouldHighlightToken, } from './utils';\n/**\n * Top-level root component which contains all the sub-components to construct a code block.\n *\n * API Reference: {@link https://react-code-block.netlify.app/api-reference#codeblock}\n */\nconst CodeBlock = ({ code, words = [], lines = [], children, ...props }) => {\n    const parsedWords = useMemo(() => parseWordHighlights(words), [words]);\n    return (_jsx(RootContext.Provider, { value: { code: code.trim(), words: parsedWords, lines, ...props }, children: children }));\n};\nconst Code = ({ as, children, ...props }, ref) => {\n    const { lines, words, ...highlightProps } = useRootContext();\n    const Tag = as ?? 'pre';\n    return (_jsx(Highlight, { ...highlightProps, children: (highlight) => (_jsx(Tag, { ...props, ref: ref, children: highlight.tokens.map((line, i) => {\n                const lineNumber = i + 1;\n                const isLineHighlighted = shouldHighlightLine(lineNumber, lines);\n                return (_jsx(LineContext.Provider, { value: { highlight, line, lineNumber }, children: typeof children === 'function'\n                        ? children({ isLineHighlighted, lineNumber }, i)\n                        : children }, i));\n            }) })) }));\n};\nconst LineContent = ({ as, children, className, ...rest }, ref) => {\n    const { highlight, line } = useLineContext();\n    const { getLineProps } = highlight;\n    const Tag = as ?? 'div';\n    return (_jsx(Tag, { ...getLineProps({ line, className }), ...rest, ref: ref, children: children }));\n};\nconst Token = ({ as, children = ({ children }) => _jsx(\"span\", { children: children }), className, ...rest }, ref) => {\n    const { words } = useRootContext();\n    const { line, highlight, lineNumber } = useLineContext();\n    const { getTokenProps } = highlight;\n    const Tag = as ?? 'span';\n    return (_jsx(React.Fragment, { children: line.map((token, key) => {\n            let { children: contentWithSpaces, ...props } = getTokenProps({\n                token,\n                className,\n            });\n            let content = [contentWithSpaces];\n            if (words.length) {\n                content = contentWithSpaces\n                    .split(new RegExp(`(${words.map(([word]) => word).join('|')})`))\n                    .filter(Boolean);\n            }\n            return (_jsx(React.Fragment, { children: content.map((content, i) => (_jsx(Tag, { ...props, ...rest, ref: ref, children: children({\n                        children: content,\n                        isTokenHighlighted: shouldHighlightToken(content, lineNumber, words),\n                    }) }, i))) }, key));\n        }) }));\n};\nconst LineNumber = ({ as, ...props }, ref) => {\n    const { lineNumber } = useLineContext();\n    const Tag = as ?? 'span';\n    return (_jsx(Tag, { ...props, ref: ref, children: lineNumber }));\n};\n/**\n * Container which contains code to render each line of the code.\n *\n * API Reference: {@link https://react-code-block.netlify.app/api-reference#codeblockcode}\n */\nCodeBlock.Code = forwardRef(Code);\n/**\n * Container for a single line of the code.\n *\n * API Reference: {@link https://react-code-block.netlify.app/api-reference#codeblocklinecontent}\n */\nCodeBlock.LineContent = forwardRef(LineContent);\n/**\n * Renders a syntax-highlighted token from the current line.\n *\n * API Reference: {@link https://react-code-block.netlify.app/api-reference#codeblocktoken}\n */\nCodeBlock.Token = forwardRef(Token);\n/**\n * Renders the line number for the current line.\n *\n * API Reference: {@link https://react-code-block.netlify.app/api-reference#codeblocklinenumber}\n */\nCodeBlock.LineNumber = forwardRef(LineNumber);\nexport { CodeBlock };\n", "import { createContext, useContext } from 'react';\nexport const RootContext = createContext(undefined);\nexport const LineContext = createContext(undefined);\nexport const useRootContext = () => {\n    const ctx = useContext(RootContext);\n    if (ctx === undefined) {\n        throw new Error('Could not find nearest <CodeBlock /> component. Please wrap this component with a <CodeBlock /> component.');\n    }\n    return ctx;\n};\nexport const useLineContext = () => {\n    const ctx = useContext(LineContext);\n    if (ctx === undefined) {\n        throw new Error('Could not find nearest <CodeBlock.Code /> component. Please wrap this component with <CodeBlock.Code /> component.');\n    }\n    return ctx;\n};\n", "export const shouldHighlightLine = (line, highlights) => {\n    return highlights.some((highlight) => {\n        if (typeof highlight === 'number') {\n            return line === highlight;\n        }\n        const [min, max] = highlight.split(':').map((val) => parseInt(val));\n        return min <= line && line <= max;\n    });\n};\nexport const shouldHighlightToken = (word, line, highlights) => {\n    return highlights.some(([highlightWord, [min, max]]) => highlightWord === word && min <= line && line <= max);\n};\nexport const parseWordHighlights = (words) => {\n    return words.map((word) => {\n        word = word.startsWith('/') ? word : '/' + word;\n        const [, highlightWord, highlightRange = '0:Infinity'] = word.split('/');\n        const [min, max = min] = highlightRange\n            .split(':')\n            .map((val) => Number(val));\n        return [highlightWord, [min, max]];\n    });\n};\n"],
  "mappings": "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",
  "names": ["import_react", "_jsx", "children", "React", "content"]
}
