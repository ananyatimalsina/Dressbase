import {
  Highlight2
} from "./chunk-DXHU3OCN.js";
import "./chunk-VEB3A3D5.js";
import {
  require_jsx_runtime
} from "./chunk-RLMGAKMB.js";
import {
  __toESM,
  require_react
} from "./chunk-2YIMICFJ.js";

// node_modules/react-code-block/dist/code-block.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/react-code-block/dist/contexts.js
var import_react = __toESM(require_react(), 1);
var RootContext = (0, import_react.createContext)(void 0);
var LineContext = (0, import_react.createContext)(void 0);
var useRootContext = () => {
  const ctx = (0, import_react.useContext)(RootContext);
  if (ctx === void 0) {
    throw new Error("Could not find nearest <CodeBlock /> component. Please wrap this component with a <CodeBlock /> component.");
  }
  return ctx;
};
var useLineContext = () => {
  const ctx = (0, import_react.useContext)(LineContext);
  if (ctx === void 0) {
    throw new Error("Could not find nearest <CodeBlock.Code /> component. Please wrap this component with <CodeBlock.Code /> component.");
  }
  return ctx;
};

// node_modules/react-code-block/dist/utils.js
var shouldHighlightLine = (line, highlights) => {
  return highlights.some((highlight) => {
    if (typeof highlight === "number") {
      return line === highlight;
    }
    const [min, max] = highlight.split(":").map((val) => parseInt(val));
    return min <= line && line <= max;
  });
};
var shouldHighlightToken = (word, line, highlights) => {
  return highlights.some(([highlightWord, [min, max]]) => highlightWord === word && min <= line && line <= max);
};
var parseWordHighlights = (words) => {
  return words.map((word) => {
    word = word.startsWith("/") ? word : "/" + word;
    const [, highlightWord, highlightRange = "0:Infinity"] = word.split("/");
    const [min, max = min] = highlightRange.split(":").map((val) => Number(val));
    return [highlightWord, [min, max]];
  });
};

// node_modules/react-code-block/dist/code-block.js
var CodeBlock = ({ code, words = [], lines = [], children, ...props }) => {
  const parsedWords = (0, import_react2.useMemo)(() => parseWordHighlights(words), [words]);
  return (0, import_jsx_runtime.jsx)(RootContext.Provider, { value: { code: code.trim(), words: parsedWords, lines, ...props }, children });
};
var Code = ({ as, children, ...props }, ref) => {
  const { lines, words, ...highlightProps } = useRootContext();
  const Tag = as ?? "pre";
  return (0, import_jsx_runtime.jsx)(Highlight2, { ...highlightProps, children: (highlight) => (0, import_jsx_runtime.jsx)(Tag, { ...props, ref, children: highlight.tokens.map((line, i) => {
    const lineNumber = i + 1;
    const isLineHighlighted = shouldHighlightLine(lineNumber, lines);
    return (0, import_jsx_runtime.jsx)(LineContext.Provider, { value: { highlight, line, lineNumber }, children: typeof children === "function" ? children({ isLineHighlighted, lineNumber }, i) : children }, i);
  }) }) });
};
var LineContent = ({ as, children, className, ...rest }, ref) => {
  const { highlight, line } = useLineContext();
  const { getLineProps } = highlight;
  const Tag = as ?? "div";
  return (0, import_jsx_runtime.jsx)(Tag, { ...getLineProps({ line, className }), ...rest, ref, children });
};
var Token = ({ as, children = ({ children: children2 }) => (0, import_jsx_runtime.jsx)("span", { children: children2 }), className, ...rest }, ref) => {
  const { words } = useRootContext();
  const { line, highlight, lineNumber } = useLineContext();
  const { getTokenProps } = highlight;
  const Tag = as ?? "span";
  return (0, import_jsx_runtime.jsx)(import_react2.default.Fragment, { children: line.map((token, key) => {
    let { children: contentWithSpaces, ...props } = getTokenProps({
      token,
      className
    });
    let content = [contentWithSpaces];
    if (words.length) {
      content = contentWithSpaces.split(new RegExp(`(${words.map(([word]) => word).join("|")})`)).filter(Boolean);
    }
    return (0, import_jsx_runtime.jsx)(import_react2.default.Fragment, { children: content.map((content2, i) => (0, import_jsx_runtime.jsx)(Tag, { ...props, ...rest, ref, children: children({
      children: content2,
      isTokenHighlighted: shouldHighlightToken(content2, lineNumber, words)
    }) }, i)) }, key);
  }) });
};
var LineNumber = ({ as, ...props }, ref) => {
  const { lineNumber } = useLineContext();
  const Tag = as ?? "span";
  return (0, import_jsx_runtime.jsx)(Tag, { ...props, ref, children: lineNumber });
};
CodeBlock.Code = (0, import_react2.forwardRef)(Code);
CodeBlock.LineContent = (0, import_react2.forwardRef)(LineContent);
CodeBlock.Token = (0, import_react2.forwardRef)(Token);
CodeBlock.LineNumber = (0, import_react2.forwardRef)(LineNumber);
export {
  CodeBlock
};
//# sourceMappingURL=react-code-block.js.map
